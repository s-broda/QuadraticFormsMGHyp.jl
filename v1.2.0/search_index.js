var documenterSearchIndex = {"docs":
[{"location":"#QuadraticFormsMGHyp.jl","page":"Home","title":"QuadraticFormsMGHyp.jl","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package implements the algorithms from our paper On Quadratic Forms in Multivariate Generalized Hyperbolic Random Vectors, which deals with tail probabilities and partial moments of quadratic forms. The algorithms generalize those of Imhof (Biometrika, 1961) and Broda (Mathematical Finance, 2012).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Consider the random variable","category":"page"},{"location":"","page":"Home","title":"Home","text":"Lequiv a_0+mathbfa^mathrmscriptscriptstyle TX+X^mathrmscriptscriptstyle TmathbfAX","category":"page"},{"location":"","page":"Home","title":"Home","text":"a quadratic plus a linear form in the random vector Xsim mathrmMGHyp(boldsymbolmumathbfCboldsymbolgammalambdachipsi); i.e., X has a d-variate generalized hyperbolic distribution with stochastic representation","category":"page"},{"location":"","page":"Home","title":"Home","text":"X=boldsymbolmu+Y boldsymbolgamma +surdYmathbfCZ","category":"page"},{"location":"","page":"Home","title":"Home","text":"where Z has a d-variate standard Normal distribution, boldsymbolmu and  boldsymbolgamma are constant d-vectors, mathbfC is a dtimes d matrix, and Y has a univariate generalized inverse Gaussian distribution with density","category":"page"},{"location":"","page":"Home","title":"Home","text":"f_GIG(ylambdachipsi)equivfracy^lambda-1k_lambda(chipsi)expleft-frac12left(chi y^-1+psi yright)right","category":"page"},{"location":"","page":"Home","title":"Home","text":"where","category":"page"},{"location":"","page":"Home","title":"Home","text":"k_lambda(chipsi)equivbegincasesfracpsi2^-lambdaGamma(lambda)text if chi=0\nfracchi2^lambdaGamma(-lambda)text if psi=0\n2left(fracchipsiright)^lambda2K_lambda(sqrtchipsi) text if chineq0 text and psineq0endcases","category":"page"},{"location":"","page":"Home","title":"Home","text":"and K_lambda(z) is the modified Bessel function of the second kind of order nu.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The generalized hyperbolic distribution contains as special cases, among others, the Variance-Gamma (lambda0), Student's t (lambda=-nu2 chi=nu psi=0), Normal Inverse Gaussian (lambda=-12), and Hyperbolic (lambda=1) distributions.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"QuadraticFormsMGHyp is a registered Julia package. It can be installed with using Pkg; Pkg.add(\"QuadraticFormsMGHyp\"). Figure 1 in the paper, reproduced in the logo above, can be generated with using Pkg; Pkg.test(\"QuadraticFormsMGHyp\").","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package exports a single function, qfmgh. Its signature is","category":"page"},{"location":"","page":"Home","title":"Home","text":"qfmgh(x, a0, a, A, C, mu, gam, lam, chi, psi; do_spa=false, order=2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The first argument, x, can be passed as either a scalar or a vector. The latter is more efficient than the more Julian way of calling qfmgh.(xvec, ...), because certain parts of the computation, such as calculating the eigenvalues of A, can be hoisted out of the loop over xvec.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The keyword argument do_spa controls whether an exact result or a saddlepoint approximation is computed. The order of the latter is controlled with the second keyword argument, order, which can be either 1 or 2.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The function returns a tuple containing (vectors of) the tail probability mathbbPLx, and the tail conditional mean mathbbELmid Lx .","category":"page"},{"location":"#Docstrings","page":"Home","title":"Docstrings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [QuadraticFormsMGHyp]","category":"page"},{"location":"#QuadraticFormsMGHyp.qfmgh","page":"Home","title":"QuadraticFormsMGHyp.qfmgh","text":"qfmgh(x::Union{AbstractVector{<:Real}, Real}, a0, a, A, C, mu, gam, lam, chi, psi; do_spa=false, order=2)\n\nSurvivor function P(L>x) = 1-F(x) and tail conditional mean, E(L|L>x), of\n\nL = a0 + a' * X + X' * A * X, where:\n\nX = mu + W * gam + sqrt(W) * C * Z,    Z ~ N(0, I), and W ~ GIG(lam, chi, psi), i.e.,    X is distributed as multivariate GHyp.\n\nKeyword arguments:\n\n`do_spa`: whether to return the exact result or a saddlepoint approximation\n`order`: order of the saddlepoint approximation\n\n(c) 2020 S.A. Broda\n\n\n\n\n\n","category":"function"}]
}
